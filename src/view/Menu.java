package view;

import model.Book;
import model.Role;
import model.User;
import service.MainService;
import utils.ColorMe.Color;
import utils.ColorMe.ColorMe;
import utils.MyList;

import java.awt.*;
import java.awt.event.KeyEvent;
import java.util.Arrays;
import java.util.Scanner;


public class Menu {
    private final MainService service;
    private final Scanner scanner = new Scanner(System.in);

    public Menu(MainService service) {
        this.service = service;
    }


    public void start() {
        // –ü–æ—Ç–æ–º —É–±—Ä–∞—Ç—å, –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –≤—ã—Å—Ç–∞–≤–ª—è—é
        service.loginUser("admin@mail.de", "admin");
        service.borrowBook(1);
//        User reader = service.registerUser("reader@mail.ru", "R(12ader")
//        service.loginUser("reader@mail.ru", "R(12ader");
//        service.borrowBook(reader, 1);

        showMenu();
    }
    private void showMenu() {
        while (true) {
            userPrompt();
            System.out.println("=======================================");
            System.out.println(ColorMe.text(Color.PURPLE, "üéâ  –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –ë–ò–ë–õ–ò–û–¢–ï–ö–£!  üéâ"));
            System.out.println("=======================================");

            System.out.println("üìö 1Ô∏è‚É£  –ú–µ–Ω—é –∫–Ω–∏–≥");
            System.out.println("üë§ 2Ô∏è‚É£  –ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");

            if (service.isAdmin() || service.isSuperAdmin())
                System.out.println(ColorMe.text(Color.ORANGE, "üîß 3Ô∏è‚É£  –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"));
            System.out.println("---------------------------------------");
            System.out.println("‚ùå 0Ô∏è‚É£  –í—ã—Ö–æ–¥");
            System.out.println("=======================================");
            System.out.print("‚ñ∂Ô∏è  –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é: ");

            int choice = scanner.nextInt();
            scanner.nextLine();

            if (choice == 0) {
                System.out.println(ColorMe.text(Color.GREEN, "üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã."));
                // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                System.exit(0);
            }

            showSubMenu(choice);
        }
    }

    private void showSubMenu(int choice) {
        switch (choice) {
            case 1:
                showBookMenu();
                break;
            case 2:
                showUserMenu();
                break;
            case 3:
                showAdminMenu();
                break;
            default:
                System.out.println(ColorMe.text(Color.RED, "‚õî –û—à–∏–±–∫–∞: –°–¥–µ–ª–∞–π—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä!"));
                waitRead();
        }
    }


    private void showUserMenu() {
        while (true) {
            userPrompt();
            System.out.println("=======================================");
            System.out.println("         üë§  –ú–ï–ù–Æ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø  üë§      ");
            System.out.println("=======================================");
            if (!service.isLoggedIn()) {
                System.out.println("üîë 1Ô∏è‚É£  –í–æ–π—Ç–∏");
                System.out.println("üÜï 2Ô∏è‚É£  –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            } else {
                System.out.println("üö™ 1Ô∏è‚É£  –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã");
            }

            System.out.println("---------------------------------------");
            System.out.println("üîô 0Ô∏è‚É£  –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é");
            System.out.println("=======================================");
            System.out.print("‚ñ∂Ô∏è  –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é: ");
            int input = scanner.nextInt();
            scanner.nextLine();

            // –ü—Ä–µ—Ä—ã–≤–∞—é —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª
            if (input == 0) break;
            handleUserMenuInput(input);
        }
    }

    private void handleUserMenuInput(int input) {
        switch (input) {
            case 1:
                if (!service.isLoggedIn()) {
                    login();
                } else {
                    logout();
                }
                break;
            case 2:
                if (!service.isLoggedIn())
                    registration();
                break;
            default:
                System.out.println(ColorMe.text(Color.RED, "‚õî –û—à–∏–±–∫–∞: –°–¥–µ–ª–∞–π—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä!"));
                waitRead();
        }
    }

    private void showAdminMenu() {
        while (true) {
            if (!service.isAdmin() && !service.isSuperAdmin()) break;
            userPrompt();
            System.out.println("=======================================");
            System.out.println(ColorMe.text(Color.PURPLE,"     üîß  –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–°–ö–û–ï –ú–ï–ù–Æ  üîß     "));
            System.out.println("=======================================");
            System.out.println("üë• 1Ô∏è‚É£  –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
            System.out.println("üìñ 2Ô∏è‚É£  –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∏—Ç–∞—Ç–µ–ª–µ–π");
            System.out.println("üö´ 3Ô∏è‚É£  –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å / —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            System.out.println("üîÑ 4Ô∏è‚É£  –ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            System.out.println("üóëÔ∏è 5Ô∏è‚É£. –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            System.out.println("---------------------------------------");
            System.out.println("üìö 6Ô∏è‚É£  –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –≤ –Ω–∞–ª–∏—á–∏–∏");
            System.out.println("üìú 7Ô∏è‚É£  –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ");
            System.out.println("üîç 8Ô∏è‚É£  –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ —É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —á–∏—Ç–∞—Ç–µ–ª—è");
            System.out.println("---------------------------------------");
            System.out.println("‚ûï 9Ô∏è‚É£    –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–Ω–∏–≥—É");
            System.out.println("‚úèÔ∏è 1Ô∏è‚É£0Ô∏è‚É£  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–∏–≥—É");
            System.out.println("üóëÔ∏è 1Ô∏è‚É£1Ô∏è‚É£  –£–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É");
            System.out.println("---------------------------------------");
            System.out.println("üîô 0Ô∏è‚É£  –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é");
            System.out.println("=======================================");
            System.out.print("‚ñ∂Ô∏è  –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é: ");

            int input = scanner.nextInt();
            scanner.nextLine();

            // –ü—Ä–µ—Ä—ã–≤–∞—é —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª
            if (input == 0) break;
            handleAdminMenuInput(input);
        }
    }

    private void handleAdminMenuInput(int input) {
        switch (input) {
            case 1:
                showAllUsers();
                break;
            case 2:
                showAllReaders();
                break;
            case 3:
                blockUnblokUser();
                break;
            case 4:
                changeUserRole();
                break;
            case 5:
                deleteUser();
                break;
            case 6:
                showAvailableBooks();
                break;
            case 7:
                showBorrowedBooks();
                break;
            case 8:
                showBooksByReader();
                break;
            case 9:
                addNewBook();
                break;
            case 10:
                editBook();
                break;
            case 11:
                deleteBook();
                break;

            default:
                System.out.println("–°–¥–µ–ª–∞–π—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä");
                waitRead();

        }
    }


    private void showBookMenu() {
        while (true) {
            userPrompt();
            System.out.println("=======================================");
            System.out.println("        üìö –ú–ï–ù–Æ –ë–ò–ë–õ–ò–û–¢–ï–ö–ò üìö         ");
            System.out.println("=======================================");
            System.out.println("1Ô∏è‚É£  üìñ  –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–Ω–∏–≥–∏");
            System.out.println("2Ô∏è‚É£  üìö  –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–∏–≥–∏");
            System.out.println("3Ô∏è‚É£  üîç  –ù–∞–π—Ç–∏ –∫–Ω–∏–≥—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é");
            System.out.println("4Ô∏è‚É£  ‚úçÔ∏è  –ù–∞–π—Ç–∏ –∫–Ω–∏–≥—É –ø–æ –∞–≤—Ç–æ—Ä—É");
            System.out.println("5Ô∏è‚É£  üé≠  –ù–∞–π—Ç–∏ –∫–Ω–∏–≥—É –ø–æ –∂–∞–Ω—Ä—É");
            System.out.println("6Ô∏è‚É£  üì•  –í–∑—è—Ç—å –∫–Ω–∏–≥—É –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏");
            System.out.println("7Ô∏è‚É£  üì§  –í–µ—Ä–Ω—É—Ç—å –∫–Ω–∏–≥—É –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É");
            System.out.println("=======================================");
            if (service.isAdmin() || service.isSuperAdmin()) {
                System.out.println(ColorMe.text(Color.YELLOW, "8Ô∏è‚É£ üîç –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ"));
                System.out.println(ColorMe.text(Color.YELLOW,"9Ô∏è‚É£ ‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–Ω–∏–≥—É"));
                System.out.println(ColorMe.text(Color.YELLOW,"1Ô∏è‚É£0Ô∏è‚É£‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–∏–≥—É"));
            }

            System.out.println("0Ô∏è‚É£  ‚ùå  –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");

            int choice = scanner.nextInt();
            scanner.nextLine();

            if (choice == 0) break;
            handleBookMenuInput(choice);
        }
    }

    private void handleBookMenuInput(int choice) {
        switch (choice) {
            case 1:
                showAllBooks();
                break;
            case 2:
                showAvailableBooks();
                break;
            case 3:
                showBooksByTitle();
                break;
            case 4:
                showBooksByAuthor();
                break;
            case 5:
                showBooksByGenre();
                break;
            case 6:
                borrowBook();
                break;
            case 7:
                returnBook();
                break;
            case 8:
                showBorrowedBooks();
                break;
            case 9:
                addNewBook();
                break;
            case 10:
                editBook();
                break;
            default:
                System.out.println("–°–¥–µ–ª–∞–π—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä");
                waitRead();
        }
    }


    private void waitRead() {
        System.out.println("\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ Enter...");
        scanner.nextLine();
    }

    private void userPrompt(){
        User activeUser = service.getActiveUser();
        if (activeUser != null)
            System.out.println(ColorMe.text(Color.BLUE,"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ") + ColorMe.text(Color.ORANGE, activeUser.getEmail()));
    }

    public void clearConsole() {
        try {
            Robot robot = null;
            robot = new Robot();
            // –í—ã—Å—Ç–∞–≤–ª—è–µ–º —à–æ—Ä—Ç–∫–∞—Ç –≤ –Ω–∞—Ç—Ä–æ–π–∫–∞—Ö SHIFT + L –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Å–æ–ª–∏
            robot.keyPress(KeyEvent.VK_DEAD_GRAVE);       // –ù–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏—à–∏ L
            robot.keyRelease(KeyEvent.VK_DEAD_GRAVE);     // –û—Ç–ø—É—Å–∫–∞–Ω–∏–µ –∫–ª–∞–≤–∏—à–∏ L
            // –ó–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –¥–∞—Ç—å –≤—Ä–µ–º—è –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ñ–æ–∫—É—Å –Ω–∞ –æ–∫–Ω–æ IntelliJ IDEA
            robot.delay(500);  // –ó–∞–¥–µ—Ä–∂–∫–∞
        } catch (AWTException e) {
            throw new RuntimeException(e);
        }
    }


    private void login() {
        System.out.println("–í–≤–µ–¥–∏—Ç–µ email: ");
        String emailUser = scanner.nextLine();

        System.out.println("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ");
        String passwordUser = scanner.nextLine();

        if (!service.loginUser(emailUser, passwordUser)) {
            System.out.println("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏!");
            waitRead();
        }
    }

    private void logout() {
        service.logout();
        System.out.println("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã");
        waitRead();
    }


    private void registration() {
        System.out.println("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        System.out.println("–í–≤–µ–¥–∏—Ç–µ email:");
        String emailInput = scanner.nextLine();

        System.out.println("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:");
        String passwordInput = scanner.nextLine();

        User user = service.registerUser(emailInput, passwordInput);

        if (user == null) {
            System.out.println("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞");
        } else {
            System.out.println("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ!");
        }
        waitRead();
    }

    private void showAllUsers () {
        System.out.println("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:");
        MyList<User> users = service.getAllUsers();
        if (!users.isEmpty()) {
            for (User user: users)
                System.out.println(user);
        } else {
            System.out.println("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç");
        }
        waitRead();
    }

    private void showAllReaders () {
        System.out.println("–°–ø–∏—Å–æ–∫ —á–∏—Ç–∞—Ç–µ–ª–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:");
        MyList<User> readers = service.getAllReaders();
        if (!readers.isEmpty()) {
            for (User reader: readers)
                System.out.println(reader);
        } else {
            System.out.println("–ß–∏—Ç–∞—Ç–µ–ª–µ–π –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –Ω–µ—Ç ;(");
        }
        waitRead();
    }

   private void blockUnblokUser () {
       System.out.println("–°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
       System.out.println("–í–≤–µ–¥–∏—Ç–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞");
       String emailInput = scanner.nextLine();

       User user = service.getUserByEmail(emailInput.trim());
       if (user == null) {
           System.out.println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º email –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
       } else {
           if (user.isBlocked()) {
               System.out.println("–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å? –î–∞/–ù–µ—Ç");
               String answerInput = scanner.nextLine();
               if (answerInput.trim().equalsIgnoreCase("–¥–∞"))
                   if (service.unblockUser(user))
                       System.out.println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω");
                   else
                       System.out.println("–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∏–∑–º–µ–Ω–µ–Ω");
           } else {
               System.out.println("–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –∞–∫—Ç–∏–≤–Ω—ã–π. –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å? –î–∞/–ù–µ—Ç");
               String answer = scanner.nextLine();
               if (answer.trim().equalsIgnoreCase("–¥–∞"))
                   if (service.blockUser(user))
                       System.out.println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω");
                   else
                       System.out.println("–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –∏–∑–º–µ–Ω–µ–Ω");
           }
       }
      waitRead();
   }

  private void changeUserRole() {
        if (!service.isSuperAdmin())
            System.out.println("–¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ä–æ–ª—å—é –°—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Äa –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –º–µ–Ω—è—Ç—å —Ä–æ–ª–∏");
      System.out.println("–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      System.out.println("–í–≤–µ–¥–∏—Ç–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å");
      String email = scanner.nextLine();

      User user = service.getUserByEmail(email.trim());
      if (user == null) {
          System.out.println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º email –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
      } else {
          System.out.println("–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + user.getRole().toString());
          System.out.println("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å: " + Arrays.toString(Role.values()));
          String roleInput = scanner.nextLine();
          try {
              Role role = Role.valueOf(roleInput.toUpperCase()); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
              if (service.changeUserRole(user, role))
                  System.out.println("–ù–æ–≤–∞—è —Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
              else
                  System.out.println("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–º–µ–Ω—ã —Ä–æ–ª–∏");
          } catch (IllegalArgumentException e) {
              System.out.println("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–æ–ª—å");
          }
      }

      waitRead();
  }

     private void deleteUser() {
         System.out.println("–í–≤–µ–¥–∏—Ç–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å");
         String emailInput = scanner.nextLine();
         User user = service.getUserByEmail(emailInput.trim());
         if (user == null) {
             System.out.println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º email –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
         } else {
             if (service.deleteUser(user))
                 System.out.println("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω");
             else
                 System.out.println("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!");
         }
         waitRead();
     }

    private void showAllBooks(){
        MyList<Book> allBooks = service.getAllBooks();
        if (allBooks.isEmpty()) {
            System.out.println("–í –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–Ω–∏–≥–∏!");
        } else {
            System.out.println(allBooks);
        }
        waitRead();
    }

    private void showAvailableBooks() {
        System.out.println("–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–Ω–∏–≥");
        MyList<Book> availableBooks = service.getAvailableBooks();
        if (availableBooks.isEmpty()) {
            System.out.println("–°–≤–æ–±–æ–¥–Ω—ã—Ö –∫–Ω–∏–≥ —Å–µ–π—á–∞—Å –Ω–µ—Ç");
            waitRead();
        } else {
            System.out.println(availableBooks);
        }
        waitRead();
    }

    private void showBooksByTitle() {
        System.out.println("–ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é");
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏");
        String title = scanner.nextLine();
        MyList<Book> booksByTitle = service.getBooksByTitle(title);
        if (booksByTitle.isEmpty()) {
            System.out.println("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–∏–≥—É");
        } else {
            System.out.println(booksByTitle);
        }
        waitRead();
    }

    private void showBooksByAuthor() {
        System.out.println("–ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –ø–æ –∞–≤—Ç–æ—Ä—É");
        System.out.println("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∞–≤—Ç–æ—Ä–∞");
        String author = scanner.nextLine();
        MyList<Book> booksByAuthor = service.getBooksByAuthor(author);
        if (booksByAuthor.isEmpty()) {
            System.out.println("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–∏–≥—É");
        } else {
            System.out.println(booksByAuthor);
        }
        waitRead();
    }

    private void showBooksByGenre() {
        System.out.println("–ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –ø–æ –∂–∞–Ω—Ä—É");
        System.out.println("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∂–∞–Ω—Ä–∞");
        String genre = scanner.nextLine();
        MyList<Book> booksByGenre = service.getBookByGenre(genre);
        if (booksByGenre.isEmpty()) {
            System.out.println("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–∏–≥—É");
        } else {
            System.out.println(booksByGenre);
        }
        waitRead();
    }

    private void borrowBook() {
        System.out.println("–í–∑—è—Ç—å –∫–Ω–∏–≥—É –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏");
        System.out.println("–í–≤–µ–¥–∏—Ç–µ id –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å");
        int id = scanner.nextInt();
        scanner.nextLine();
        Book book = service.getBookById(id);
        if (book != null) {
            System.out.printf("–ö–Ω–∏–≥–∞ \"%s: %s\" –ë–µ—Ä—ë–º? –î–∞/–ù–µ—Ç\n", book.getTitle(), book.getAuthor());
            String answerInput = scanner.nextLine();
            if (answerInput.trim().equalsIgnoreCase("–¥–∞")) {
                if (!service.borrowBook(id)) {
                    System.out.println("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∑—è—Ç—å –∫–Ω–∏–≥—É");
                } else {
                    System.out.println("–í—ã –∑–∞–±—Ä–∞–ª–∏ –∫–Ω–∏–≥—É!");
                }
            }
        }
        waitRead();
    }


 private void showBorrowedBooks() {
     // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–Ω—è—Ç—ã—Ö –∫–Ω–∏–≥
     System.out.println("C–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ —É —á–∏—Ç–∞—Ç–µ–ª–µ–π");
     MyList<Book> borrowedBooks = service.getBorrowedBooks();
     if (borrowedBooks == null) {
         System.out.println("–ó–∞–Ω—è—Ç—ã—Ö –∫–Ω–∏–≥ –ø–æ–∫–∞ –Ω–µ—Ç");
     } else {
         System.out.println(borrowedBooks);
     }

     waitRead();
 }

 private void showBooksByReader() {
     System.out.println("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–Ω–∏–≥–∏ —É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —á–∏—Ç–∞—Ç–µ–ª—è");
     System.out.println("–í–≤–µ–¥–∏—Ç–µ email —á–∏—Ç–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–Ω–∏–≥–∏:");
     String email = scanner.nextLine();

     User user = service.getUserByEmail(email);

     if (user == null) {
         System.out.println("–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç!");
     } else if (user.getUserBooks().isEmpty()) {
         System.out.println("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–Ω–∏–≥");
     } else {
         System.out.println(user.getUserBooks());
     }

     waitRead();
 }

 private void addNewBook() {
     System.out.println("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏");
     System.out.println("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:");
     String title = scanner.nextLine().trim();

     System.out.println("–í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞:");
     String author = scanner.nextLine().trim();

     System.out.println("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –∫–Ω–∏–≥–∏:");
     int year = scanner.nextInt();
     scanner.nextLine();

     System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü:");
     int pages = scanner.nextInt();
     scanner.nextLine();

     System.out.println("–í–≤–µ–¥–∏—Ç–µ –∂–∞–Ω—Ä:");
     String genre = scanner.nextLine().trim();

     if (title.isEmpty() || author.isEmpty() || genre.isEmpty()) {
         System.out.println("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!");

         waitRead();
         return;
     }

     Book book = service.addBook(title, author, year, pages, genre);
     if (book == null) {
         System.out.println("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É");
     } else {
         System.out.println("–ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!");
         System.out.println(book);
     }

     waitRead();
 }

 private void editBook() {
     System.out.println("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–∏–≥");
     System.out.println("–í–≤–µ–¥–∏—Ç–µ id –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:");
     int id = scanner.nextInt();
     scanner.nextLine();

     Book book = service.getBookById(id);

     System.out.println("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å. –ï—Å–ª–∏ –ø–æ–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ù–ï –Ω—É–∂–Ω–æ - –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º:");
     System.out.println("–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏: " + book.getTitle());
     System.out.println("–ü–æ–º–µ–Ω—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ:");
     String newTitle = scanner.nextLine().trim();

     System.out.println("–¢–µ–∫—É—â–∏–π –∞–≤—Ç–æ—Ä –∫–Ω–∏–≥–∏: " + book.getAuthor());
     System.out.println("–ü–æ–º–µ–Ω—è—Ç—å –∞–≤—Ç–æ—Ä–∞:");
     String newAuthor = scanner.nextLine().trim();

     System.out.println("–¢–µ–∫—É—â–∏–π –≥–æ–¥ –∫–Ω–∏–≥–∏: " + book.getYear());
     System.out.println("–ü–æ–º–µ–Ω—è—Ç—å –≥–æ–¥:");
     int newYear = scanner.nextInt();
     scanner.nextLine();

     System.out.println("–¢–µ–∫—É—â–µ–µ –∫–æ–ª-–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –∫–Ω–∏–≥–∏: " + book.getPages());
     System.out.println("–ü–æ–º–µ–Ω—è—Ç—å –∫–æ–ª-–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü:");
     int newPages = scanner.nextInt();
     scanner.nextLine();

     System.out.println("–¢–µ–∫—É—â–∏–π –∂–∞–Ω—Ä –∫–Ω–∏–≥–∏: " + book.getGenre());
     System.out.println("–ü–æ–º–µ–Ω—è—Ç—å –∂–∞–Ω—Ä:");
     String newGenre = scanner.nextLine().trim();

     if (newTitle.isEmpty()) newTitle = null;
     if (newAuthor.isEmpty()) newAuthor = null;
     if (newGenre.isEmpty()) newGenre = null;

     if (service.editBook(id, newTitle, newAuthor, newYear, newPages, newGenre)) {
         System.out.println("–ö–Ω–∏–≥–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞!");
         System.out.println(service.getBookById(id));
     } else {
         System.out.println("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–∏–≥—É");
     }

     waitRead();
 }

 private void deleteBook() {
     System.out.println("–£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–∏–≥");
     System.out.println("–í–≤–µ–¥–∏—Ç–µ id –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:");
     int bookToDelete = scanner.nextInt();
     scanner.nextLine();

     if (!service.deleteBookById(bookToDelete)) {
         System.out.println("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É");
     } else {
         System.out.println("–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –∫–Ω–∏–≥—É!");
     }

     waitRead();
 }



    private void returnBook() {
        System.out.println("–í–µ—Ä–Ω—É—Ç—å –∫–Ω–∏–≥—É –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É");
        MyList<Book> borrowedBooks = service.getUserBooks();
        if (borrowedBooks.isEmpty()) {
            System.out.println("–£ –í–∞—Å –Ω–µ—Ç –≤–∑—è—Ç—ã—Ö –Ω–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∫–Ω–∏–≥");
        } else {
            System.out.println(borrowedBooks);
            System.out.println("–í–≤–µ–¥–∏—Ç–µ ‚Ññ –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å");
            int idBook = scanner.nextInt();
            scanner.nextLine();
            if (!service.returnBook(idBook)) {
                System.out.println("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å –∫–Ω–∏–≥—É");
            } else {
                System.out.println("–í—ã –≤–µ—Ä–Ω—É–ª–∏ –∫–Ω–∏–≥—É!");
            }
        }
        waitRead();
    }
}
